#!/bin/sh
#
# Hybris adaptation bootstrapping initramfs init script.
#
# Copyright (c) 2014 Jolla Oy
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 2 as published by the
# Free Software Foundation.
#
# Authors:
#   - Tom Swindell <t.swindell@rubyx.co.uk>
#   - David Greaves <david@dgreaves.com>
#

# This init script runs in early boot in initrd and does a switch_root
# to the real rootfs. It can also be copied into rootfs and provide
# monitoring of the boot process there too.

# Be careful - you can't run any external commands until busybox has installed.

. /init-functions.sh

# General logging
set -x
exec >/init.log 2>&1
echo "Running Mer Boat Loader"

BOOTLOGO=%BOOTLOGO%
ALWAYSDEBUG=%ALWAYSDEBUG%
DATA_PARTITION=%DATA_PART%
SYSTEM_PARTITION=$(findfs LABEL="system")
DEFAULT_OS=%DEFAULT_OS%

set_welcome_msg() {
	cat <<EOF >/etc/issue.net
Welcome to the Mer/SailfishOS Boat loader debug init system.

Log so far is in /init.log

To make post-switch_root halt before starting systemd, perform:
EOF
	if [ "$DONE_SWITCH" = "no" ]; then
		cat <<EOF >>/etc/issue.net
  touch /target/init_enter_debug2
EOF
	else
		cat <<EOF >>/etc/issue.net
  touch /init_enter_debug2
EOF
	fi
	cat <<EOF >>/etc/issue.net
(When run post-switch_root, telnet is on port 2323, not 23)

EOF

	HALT_BOOT="${1:-y}"
	if [ "$HALT_BOOT" = "y" ]; then
		cat <<EOF >>/etc/issue.net
You may inject commands into init shell process (PID 1):

To see output of commands as they're injected:
  tail -f /init.log &
To run a command:
  echo "ls -l /" >/init-ctl/stdin

(Be careful if you experiment with exec as you need to terminate
daemons and disable busybox hotplug handling)

To allow init to continue:
  echo "continue" >/init-ctl/stdin

EOF
	fi

	if [ "$DONE_SWITCH" = "no" ]; then
		cat <<EOF >>/etc/issue.net
In order to work safely with the device's mmc you should
  echo "umount_stowaways" >/init-ctl/stdin

Then you can mount and modify exported mass storage on host. When done
  echo "mount_stowaways" >/init-ctl/stdin


EOF
	fi
}

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

# Default setting is rndis - add mass_storage for a debug boot
# enable using usb_setup
USB_FUNCTIONS=rndis

ANDROID_USB=/sys/class/android_usb/android0
LOCAL_IP=192.168.2.15

DONE_SWITCH=no
# Are we running in real rootfs
if [ "$0" = "/init-debug" ]; then
	DONE_SWITCH=yes
fi

# Now either initrd or rootfs sequence

if [ "$DONE_SWITCH" = "no" ]; then
	EXPLICIT_BUSYBOX=""
	TELNET_DEBUG_PORT=23
	/bin/busybox --install -s
	date

	do_mount_devprocsys

	do_hotplug_scan

	# Support /dev/block/mmcXXX only in initrd phase
	ln -s . /dev/block
	ln -s /proc/mounts /etc/mtab

	check_kernel_config

	bootsplash

	mount_stowaways

	# No target debug unless we debug here too (for now)

	DBG_REASON=""
	[ -e /diagnosis.log ] && DBG_REASON="Refusing to boot. See /diagnosis.log (in initrd only)"
	[ "$(get_opt bootmode)" = "debug" ] && DBG_REASON="bootmode=debug on kernel command line"
	[ x$ALWAYSDEBUG = x1 ] && DBG_REASON="Always debug: rndis + mass_storage"
	[ -f /target/init_enter_debug ] && DBG_REASON="/init_enter_debug exists"
	[ -f /target/init_disable_telnet ] && DISABLE_TELNET="y"

	if ! [ "$DBG_REASON" = "" ]; then
		# During debug we export mmc too (some variations in location here)
		lun=/sys/class/android_usb/f_mass_storage/lun/file
		if [ -f $lun ]; then echo /dev/mmcblk0 >$lun; fi
		lun=/sys/class/android_usb/f_mass_storage/lun0/file
		if [ -f $lun ]; then echo /dev/mmcblk0 >$lun; fi
		USB_FUNCTIONS=rndis,mass_storage

		run_debug_session "$DBG_REASON" "y"

		# Tidy up before we switch_root (rootfs init-debug leaves these running during bootup)
		killall telnetd
		killall udhcpd

		USB_FUNCTIONS=rndis
		usb_setup "Mer Debug: done debug, disabling storage"
	fi

	# Remount the target as ro if it provides the .halium-ro file
	if [ -e /target/.halium-ro ]; then
		mount /target -o remount,ro
	fi

	# Disable mdev hotplug now - let udev handle it in main boot
	echo "" >/proc/sys/kernel/hotplug

	if [ -f "/target/init-debug" ]; then
		echo "hybris-boot: Running init-debug" >/target/data/init-debug-stderrout
		exec switch_root /target /init-debug >>/target/data/init-debug-stderrout 2>&1
	else
		# Prefer /sbin/preinit over /sbin/init
		[ -x /target/sbin/preinit ] && INIT=/sbin/preinit || INIT=/sbin/init
		echo "hybris-boot: Booting $INIT in real rootfs" >/target/data/init-stderrout
		exec switch_root /target $INIT >>/target/data/init-stderrout 2>&1
	fi
	run_debug_session "Failed to boot init in real rootfs"
else
	# We're in the real rootfs running as init-debug
	EXPLICIT_BUSYBOX="/bin/busybox-static"
	TELNET_DEBUG_PORT=2323

	do_mount_devprocsys

	HALT_BOOT="n"
	[ -f /init_enter_debug2 ] && HALT_BOOT="y"
	[ -f /init_disable_telnet ] && DISABLE_TELNET="y"
	run_debug_session "init-debug in real rootfs" $HALT_BOOT

	# If we don't do this then udev will not be able to create /dev/block/*
	rm /dev/block

	# Now try to boot the real init
	# Prefer /sbin/preinit over /sbin/init
	[ -x /sbin/preinit ] && INIT=/sbin/preinit || INIT=/sbin/init
	exec $INIT &>/boot/systemd_stdouterr
	run_debug_session "init in real rootfs failed"
fi
